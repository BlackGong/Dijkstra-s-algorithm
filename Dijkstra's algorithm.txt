#include <iostream>
#include <vector>
#include <list>
#include <fstream>
using namespace std;
class e_node { //stands for edge node
public:
	int nb;//the neighbor of a currently considered node
	int weight; //weight of the edge to the above neighbor
	e_node() {}//constructor
};
class rt_node { //rt stands for routing table
public:
	int cost;  //cost to a node
	int from;  //the from node to this node
	int checked;
	int h_pos; //the postion in heap for this node
	rt_node() { from = -1;  cost = 9999;  checked = 0; }
};

class h_node { //stands for heap_node
public:
	int id;
	int cost;
	h_node() { id = -1; cost = 9999; }
	h_node(int i, int j) { id = i; cost = j; }
	bool operator<(h_node h) { return (cost < h.cost); }
};

void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start);
void select_node(vector<list<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap);
void neighbor_update(vector<list<e_node>> & graph, vector<rt_node> & rt, vector<h_node> & heap, int &s);

h_node heap_remove(vector<h_node> & heap); //new
void heap_add(vector<h_node> & heap, h_node n); //separate function moved by myself

int main() {
	//Do not change code for main function
	ifstream in("text1.txt");
	int start;
	in >> start;  //start is the source node for the algorithm
	int n, e; //n: num of nodes ; e: num of edges
	in >> n >> e;
	list<e_node> le;
	vector<list<e_node> > graph(n, le);
	e_node e1;
	int n1, n2, w;
	for (int i = 0; i < e; i++) {
		in >> n1 >> n2 >> w;
		e1.nb = n2;
		e1.weight = w;
		graph[n1].push_back(e1);
	}
	in.close();
	vector<rt_node> rt(n); //rt stands for routing table
	vector<h_node> heap(n);

	set_up(rt, heap, start);//initialize values
	select_node(graph, rt, heap);

	for (int i = 0; i < n; i++) {

		cout << "cost from " << start << " to " << i << " is: " << rt[i].cost << "  from node is " << rt[i].from << endl;
	}
	getchar();
	getchar();
	return 0;
}


void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start) {

	//Initialization values as you see fit
	heap.clear(); // clear the heap
	rt[start].from = start; // set the start node
	heap_add(heap, h_node(start, 0)); // add the first node
}



void neighbor_update(vector<list<e_node>> & graph, vector<rt_node> & rt, vector<h_node> & heap, int &s)
{
	//this function is to be invoked by select_node
	list<e_node>::iterator iter;
	h_node  tmp = heap[heap.size() - 1];
	heap.pop_back();
	for (iter = graph[tmp.id].begin(); iter != graph[tmp.id].end(); iter++)
	{
		int pos = iter->nb;
		int d = iter->weight;
		// update the distance
		if (rt[pos].cost > tmp.cost + d)
		{
			rt[pos].cost = tmp.cost + d;
			rt[pos].from = tmp.id;
			heap_add(heap, h_node(pos, rt[pos].cost)); //jump into new function
		}
	}
	//If this code gets too long, you can move some part of it out side and form a separate function.
}





void select_node(vector<list<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap) {
	//Continue to select an unvisited node with minimum cost, and doing some general update
	//Invoke neighbor_udpate to possibly update neighbors

	// main loop
	while (heap.size() > 0)
	{
		h_node  tmp = heap_remove(heap);
		if (rt[tmp.id].checked == 1)
		{
			continue;
		}
		rt[tmp.id].checked = 1;
		rt[tmp.id].cost = tmp.cost;

		heap.push_back(tmp);
		neighbor_update(graph, rt, heap, tmp.id); //jump into neighbor_update
	}

	//If this code gets too long, you can move some part of it out side and form a separate function.
}


// add a node into heap
void heap_add(vector<h_node> & heap, h_node n)
{
	heap.push_back(n);
	int cur = heap.size() - 1;
	while (cur != 0)
	{
		int parent = (cur - 1) / 2;
		if (heap[cur] < heap[parent])
		{
			h_node t = heap[cur];
			heap[cur] = heap[parent];
			heap[parent] = t;
		}
		cur = parent;
	}
}

// remove a node into heap
h_node heap_remove(vector<h_node> & heap)
{
	// remove the 1st node, replaced by last node
	h_node ret = heap[0];
	heap[0] = heap[heap.size() - 1];
	heap.pop_back();

	int cur = 0;
	// adjust the heap
	while (cur <= (int)heap.size() / 2 - 1)
	{
		int left = cur * 2 + 1;
		int right = cur * 2 + 2;

		if ((int)heap.size() >= right + 1)
		{
			// last node is right
			if (heap[cur].cost > heap[left].cost || heap[cur].cost > heap[right].cost)
			{
				if (heap[left].cost > heap[right].cost)
				{
					h_node t = heap[right];
					heap[right] = heap[cur];
					heap[cur] = t;
					cur = right;
				}
				else
				{
					h_node t = heap[left];
					heap[left] = heap[cur];
					heap[cur] = t;
					cur = left;
				}
			}
			else
			{
				break;
			}
		}
		else if (heap.size() == left + 1)
		{
			// last node is left
			if (heap[cur].cost > heap[left].cost)
			{
				h_node t = heap[left];
				heap[left] = heap[cur];
				heap[cur] = t;
				cur = left;
			}
			else
			{
				break;
			}
		}
	}
	return ret;
}



/*
//sample screenshot
cost from 0 to 0 is: 0  from node is 0
cost from 0 to 1 is : 7  from node is 2
cost from 0 to 2 is : 4  from node is 0
cost from 0 to 3 is : 10  from node is 1
cost from 0 to 4 is : 14  from node is 3
cost from 0 to 5 is : 9  from node is 1
*/

/*
//sample input file text1.txt
0
6
12
0 5 16
0 4 15
0 2 4
0 3 12
0 1 9
1 3 3
1 5 2
2 3 14
2 1 3
3 4 4
4 5 1
5 3 2
*/